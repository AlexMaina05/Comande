<html>
  <head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
      rel="stylesheet"
      as="style"
      onload="this.rel='stylesheet'"
      href="https://fonts.googleapis.com/css2?display=swap&amp;family=Manrope%3Awght%40400%3B500%3B700%3B800&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900"
    />

    <title>Stitch Design - Nuova Prenotazione</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
  </head>
  <body>
    <div
      class="relative flex size-full min-h-screen flex-col bg-[#231020] dark justify-between group/design-root overflow-x-hidden"
      style="--select-button-svg: url('data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2724px%27 height=%2724px%27 fill=%27rgb(203,144,193)%27 viewBox=%270 0 256 256%27%3e%3cpath d=%27M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z%27%3e%3c/path%3e%3c/svg%3e'); font-family: Manrope, &quot;Noto Sans&quot;, sans-serif;"
    >
      <div class="pb-20"> {/* Added padding for nav bar */}
        <div class="flex items-center bg-[#231020] p-4 pb-2 justify-between sticky top-0 z-10">
          <a href="Reservation" class="text-white flex size-12 shrink-0 items-center" data-icon="X" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"
              ></path>
            </svg>
          </a>
          <h2 class="text-white text-lg font-bold leading-tight tracking-[-0.015em] flex-1 text-center pr-12">Nuova prenotazione</h2>
        </div>
        <form id="newReservationForm">
          <div id="form-message-area" class="px-4 py-2 text-center text-sm"></div> 
          
          <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
            <label class="flex flex-col min-w-40 flex-1">
              <input
                id="customer_name"
                placeholder="Nome cliente"
                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border-none bg-[#492242] focus:border-none h-14 placeholder:text-[#cb90c1] p-4 text-base font-normal leading-normal"
              />
              <span id="customer_name_error" class="text-red-400 text-xs pt-1"></span>
            </label>
          </div>
          <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
            <label class="flex flex-col min-w-40 flex-1">
              <input
                id="phone_number"
                placeholder="Numero di telefono (opzionale)"
                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border-none bg-[#492242] focus:border-none h-14 placeholder:text-[#cb90c1] p-4 text-base font-normal leading-normal"
              />
            </label>
          </div>
          <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
            <label class="flex flex-col min-w-40 flex-1">
              <input
                type="text"
                id="reservation_time"
                placeholder="Orario (YYYY-MM-DD HH:MM:SS)"
                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border-none bg-[#492242] focus:border-none h-14 placeholder:text-[#cb90c1] p-4 text-base font-normal leading-normal"
              />
              <span id="reservation_time_error" class="text-red-400 text-xs pt-1"></span>
            </label>
          </div>
          <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
            <label class="flex flex-col min-w-40 flex-1">
              <input
                type="number"
                id="num_guests"
                placeholder="Numero persone"
                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border-none bg-[#492242] focus:border-none h-14 placeholder:text-[#cb90c1] p-4 text-base font-normal leading-normal"
              />
              <span id="num_guests_error" class="text-red-400 text-xs pt-1"></span>
            </label>
          </div>
          <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
            <label class="flex flex-col min-w-40 flex-1">
              <input
                type="number"
                id="table_number"
                placeholder="Tavolo (opzionale)"
                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border-none bg-[#492242] focus:border-none h-14 placeholder:text-[#cb90c1] p-4 text-base font-normal leading-normal"
              />
               <span id="table_number_error" class="text-red-400 text-xs pt-1"></span>
            </label>
          </div>
          <div class="flex px-4 py-3">
            <button
              id="submitButton"
              type="submit"
              class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-12 px-5 flex-1 bg-[#d30bb2] text-white text-base font-bold leading-normal tracking-[0.015em] hover:bg-[#b30992] disabled:opacity-70"
            >
              <span class="truncate">Salva</span>
            </button>
          </div>
        </form>
      </div>
      {/* Bottom Nav Placeholder - Not interactive on this page but good for layout consistency */}
      <div class="flex gap-2 border-t border-[#492242] bg-[#34182f] px-4 pb-3 pt-2 fixed bottom-0 left-0 right-0 z-10">
         {/* Placeholder for nav items, actual links on other pages */}
      </div>
      <div class="h-5 bg-[#34182f]"></div> {/* Spacer for bottom fixed bar */}
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('newReservationForm');
        const submitButton = document.getElementById('submitButton');
        const submitButtonText = submitButton.querySelector('span');
        const formMessageArea = document.getElementById('form-message-area');

        // Input specific error elements
        const customerNameErrorEl = document.getElementById('customer_name_error');
        const reservationTimeErrorEl = document.getElementById('reservation_time_error');
        const numGuestsErrorEl = document.getElementById('num_guests_error');
        const tableNumberErrorEl = document.getElementById('table_number_error');

        function showMessage(element, message, isError = true) {
            element.textContent = message;
            element.className = isError ? 'text-red-400 text-xs pt-1 h-4' : 'text-green-400 text-xs pt-1 h-4'; // h-4 to maintain space
        }
        
        function clearAllMessages() {
            showMessage(formMessageArea, '', false);
            showMessage(customerNameErrorEl, '', false);
            showMessage(reservationTimeErrorEl, '', false);
            showMessage(numGuestsErrorEl, '', false);
            showMessage(tableNumberErrorEl, '', false);
        }

        form.addEventListener('submit', async (event) => {
          event.preventDefault();
          clearAllMessages();

          const customerName = document.getElementById('customer_name').value.trim();
          const phoneNumber = document.getElementById('phone_number').value.trim();
          const reservationTime = document.getElementById('reservation_time').value.trim();
          const numGuests = document.getElementById('num_guests').value;
          const tableNumber = document.getElementById('table_number').value;
          
          let isValid = true;

          if (!customerName) {
            showMessage(customerNameErrorEl, 'Nome cliente è obbligatorio.');
            isValid = false;
          }
          if (!reservationTime) {
            showMessage(reservationTimeErrorEl, 'Orario è obbligatorio.');
            isValid = false;
          } else {
            const timeRegex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;
            if (!timeRegex.test(reservationTime)) {
              showMessage(reservationTimeErrorEl, 'Formato: YYYY-MM-DD HH:MM:SS');
              isValid = false;
            }
          }
          
          if (!numGuests) {
            showMessage(numGuestsErrorEl, 'Numero persone è obbligatorio.');
            isValid = false;
          } else {
            const numGuestsInt = parseInt(numGuests, 10);
            if (isNaN(numGuestsInt) || numGuestsInt <= 0) {
               showMessage(numGuestsErrorEl, 'Deve essere un numero positivo.');
               isValid = false;
            }
          }
          
          if (tableNumber) {
            const tableNumberInt = parseInt(tableNumber, 10);
            if (isNaN(tableNumberInt) || tableNumberInt <=0) {
                showMessage(tableNumberErrorEl, 'Deve essere un numero positivo.');
                isValid = false;
            }
          }

          if (!isValid) {
            return;
          }
          
          const payload = {
            customer_name: customerName,
            phone_number: phoneNumber,
            reservation_time: reservationTime,
            num_guests: parseInt(numGuests, 10),
          };
          if (tableNumber) {
            payload.table_number = parseInt(tableNumber, 10);
          }

          submitButton.disabled = true;
          submitButtonText.textContent = 'Salvataggio...';
          showMessage(formMessageArea, 'Invio prenotazione...', false);


          try {
            const response = await fetch('/api/reservations', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json', },
              body: JSON.stringify(payload),
            });

            if (response.status === 201) {
              const result = await response.json();
              showMessage(formMessageArea, \`Prenotazione creata con successo! ID: \${result.id}\`, false);
              form.reset(); 
              setTimeout(() => { 
                clearAllMessages();
                // window.location.href = 'Reservation'; // Optional redirect
              }, 3000);
            } else {
              const errorData = await response.json();
              showMessage(formMessageArea, \`Errore: \${errorData.error || response.statusText}\`);
            }
          } catch (error) {
            console.error('Errore:', error);
            showMessage(formMessageArea, 'Si è verificato un errore di rete. Riprova più tardi.');
          } finally {
            submitButton.disabled = false;
            submitButtonText.textContent = 'Salva';
          }
        });
      });
    </script>
  </body>
</html>
